###################################################################################################################

 ##### #   # ##### ##### #####  ###  #     #####  ####  ###  ##### #####  ###  #   #
   #   ##  #   #     #     #   #   # #       #   #     #   #   #     #   #   # ##  #
   #   # # #   #     #     #   ##### #       #    ###  #####   #     #   #   # # # #
   #   #  ##   #     #     #   #   # #       #       # #   #   #     #   #   # #  ##
 ##### #   # #####   #   ##### #   # ##### ##### ####  #   #   #   #####  ###  #   #

###################################################################################################################

K_economy_initialize = {
	every_country = {
		set_variable = { c_total_population = 0 }
		set_variable = { c_total_pop_number = 0 }
		set_variable = { c_national_food_reserve = 0 }
		set_variable = { c_national_gold_reserve = 0 }
		set_variable = { c_food_tax_level = 0 }
		set_variable = { c_gold_tax_level = 0 }


		set_country_flag = K_c_economy_initialized_flag

		log = "Country - [Root.GetName]: Economy Initialized"
	}

	every_state = {
		set_variable = { s_development = 0 }
		set_variable = { s_production_type = 0 }
		set_variable = { s_food_surplus = 0 }
		set_variable = { s_food_need = 0 }
		set_variable = { s_local_wealth = 0 }
		set_variable = { s_current_nb_pops = 0 }

		##############################################################
		# POPS ARRAYS INITIALIZATION
		##############################################################

		add_to_array = {
		    array = s_pops
		    value = 0
		}
		resize_array = {
		    array = s_pops
		    value = 0
		    size = 3
		}

		add_to_array = {
		    array = s_pops_hapiness
		    value = 0
		}
		resize_array = {
		    array = s_pops_hapiness
		    value = 0
		    size = 3
		}

		add_to_array = {
		    array = s_pops_value
		    value = 0
		}
		resize_array = {
		    array = s_pops_value
		    value = 0
		    size = 3
		}

		add_to_array = {
		    array = s_pops_tax
		    value = 0
		}
		resize_array = {
		    array = s_pops_tax
		    value = 0
		    size = 3
		}

		#############################################################

		##############################################################
		# POPS ARRAYS : SETTING DEFAULT VALUES
		##############################################################

		set_variable = { s_pops_hapiness^0 = 1 }
		set_variable = { s_pops_hapiness^1 = 1 }
		set_variable = { s_pops_hapiness^2 = 1 }

		set_variable = { s_pops_value^0 = 1 }
		set_variable = { s_pops_value^1 = 3 }
		set_variable = { s_pops_value^2 = 10 }

		set_variable = { s_pops_tax^0 = 0.1 }
		set_variable = { s_pops_tax^1 = 0.1 }
		set_variable = { s_pops_tax^2 = 0.1 }

		#############################################################

		set_state_flag = K_s_economy_initialized_flag

		log = "State - [Root.GetName]: Economy Initialized"
	}
}

K_economy_c_initialize = {
	
}

K_generate_init_pops = {
	every_state = {
		set_temp_variable = { K_s_number_of_pops_to_generate = state_population_k }
		round_temp_variable = K_s_number_of_pops_to_generate 		# We generate one pop per k population

		set_variable = { s_current_nb_pops = K_s_number_of_pops_to_generate }

		add_to_temp_array = {
		    array = s_pops_temp
		    value = 0
		}
		resize_temp_array = {
		    array = s_pops_temp
		    value = 0
		    size = K_s_number_of_pops_to_generate
		}

		log = "State - [Root.GetName]: Starting Pop Initialization"

		for_each_loop = {  # Class assignment for the pops
		    array = s_pops_temp
		    value = s_pops_array_v
		    index = s_pops_array_i
		    
		    # When the state categories are settled, use this to generate the pops
		    #if = {
			#	limit = {
			#		has_state_category = rural
			#	}
			#}
			
			#else = {
			#
			#}

			# We assign pop type using Monte Carlo
			set_temp_variable = { K_s_pop_class_type_diceroll = random }
			if = {
				limit = {
					check_variable = { K_s_pop_class_type_diceroll < 0.7 }
				}
				add_to_variable = { s_pops^0 = 1 }
			}

			else = {
				if = {
					limit = {
						check_variable = {
						    var = K_s_pop_class_type_diceroll
						    value = 0.7
						    compare = greater_than_or_equals
						}
						check_variable = { K_s_pop_class_type_diceroll < 0.9 }
					}
					add_to_variable = { s_pops^1 = 1 }
				}

				else = {
					add_to_variable = { s_pops^2 = 1 }
				}
			}
		}

		log = "State - [Root.GetName]: Pop Initialized"
	}
}

###################################################################################################################

  ####  ###  #   # ####  #   # #####  ###  ##### #####  ###  #   #  ####
 #     #   # ## ## #   # #   #   #   #   #   #     #   #   # ##  # #
 #     #   # # # # ####  #   #   #   #####   #     #   #   # # # #  ###
 #     #   # #   # #     #   #   #   #   #   #     #   #   # #  ##     #
  ####  ###  #   # #      ###    #   #   #   #   #####  ###  #   # ####

###################################################################################################################

# First, we start by calculating all of the local, state, values
# After having calculated that, we can safely calculate the variables of the country itself
# Countries can be updated monthly, but states will require more frequent updates (weekly)
# We also need to take into account the possibility to update when new territory is conquered, or lost (?)

K_economy_weekly_tick_calc = {
	# log = "Country - [Root.GetName]: Calculating Money Generated by States"

	set_variable = { c_total_population = 0 }
	set_variable = { c_total_pop_number = 0 }

	every_owned_state = {

		####################################################################################
		# COMPUTE TOTAL POPULATION
		####################################################################################

		#########
		#### Real population
		#########

		set_temp_variable = { s_temp_population_of_this_state = state_population_k }
		owner = { add_to_variable = { c_total_population = s_temp_population_of_this_state } }

		#########
		#### Total number of pops
		#########

		set_temp_variable = { s_temp_pop_of_this_state = s_current_nb_pops }
		owner = { add_to_variable = { c_total_pop_number = s_temp_pop_of_this_state } }

		####################################################################################

		####################################################################################
		# POP GROWTH
		####################################################################################

		#########
		#### Calculations about the missing population until new pop
		#########

		set_temp_variable = { s_temp_current_s_pop = state_population_k }

		set_temp_variable = { s_temp_current_s_pop_round = state_population_k }
		round_temp_variable = s_temp_current_s_pop_round

		set_variable = { s_pop_missing_until_growth = s_temp_current_s_pop }
		subtract_from_variable = { s_pop_missing_until_growth = s_temp_current_s_pop_round }

		if = {
			limit = {
				check_variable = { s_pop_missing_until_growth < 0 }
			}
			add_to_variable = { s_pop_missing_until_growth = 1 }
		}

		#########
		#### Calculations about the eventual new pops
		#########



		####################################################################################

		####################################################################################
		# COMPUTE LOCAL WEALTH
		####################################################################################

		for_each_loop = {
		    array = s_pops
		    value = s_pops_array_v
		    index = s_pops_array_i

		    set_temp_variable = { s_temp_money_gain_this_tick = s_pops_array_v }
			multiply_temp_variable = { s_temp_money_gain_this_tick = s_pops_value^s_pops_array_i }

		    if = {
				limit = {
					check_variable = { s_production_type = s_pops_array_i }
				}

				set_temp_variable = { s_temp_money_gain_dev_bonus = s_development }
				multiply_temp_variable = { s_temp_money_gain_dev_bonus = 0.1 }
				add_to_temp_variable = { s_temp_money_gain_dev_bonus = 1 }

				multiply_temp_variable = { s_temp_money_gain_this_tick = s_temp_money_gain_dev_bonus }
			}

			set_temp_variable = { s_temp_taxed_money = s_temp_money_gain_this_tick }
			multiply_temp_variable = { s_temp_taxed_money = s_pops_tax^s_pops_array_i }
			round_temp_variable = s_temp_taxed_money

			subtract_from_temp_variable = { s_temp_money_gain_this_tick = s_temp_taxed_money }
			owner = { add_to_variable = { c_national_gold_reserve = s_temp_taxed_money } }

			add_to_variable = { s_local_wealth = s_temp_money_gain_this_tick }
		}

		####################################################################################
	}
}

K_economy_tick_c_calc = {
	every_country = {

		####################################################################################
		# COMPUTE NATIONAL GOLD RESERVE
		####################################################################################

		

		####################################################################################

	}
}